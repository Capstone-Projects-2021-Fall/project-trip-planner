-- This is auto-generated, changes here will not be reflected on the database. Do not edit this file.

CREATE DATABASE  IF NOT EXISTS `database` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `database`;
-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: tripplannerdb.cmmyrzbau9mp.us-west-2.rds.amazonaws.com    Database: database
-- ------------------------------------------------------
-- Server version	8.0.23

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Table structure for table `Activity`
--

DROP TABLE IF EXISTS `Activity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Activity` (
  `ActivityID` int NOT NULL AUTO_INCREMENT,
  `ActivityName` varchar(45) NOT NULL,
  `Latitude` decimal(6,4) NOT NULL,
  `Longitude` decimal(7,4) NOT NULL,
  `Address` varchar(256) DEFAULT NULL COMMENT 'modified to allow things like Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch, Wales, UK.\n',
  PRIMARY KEY (`ActivityID`),
  UNIQUE KEY `ActivityName` (`ActivityName`,`Latitude`,`Longitude`),
  CONSTRAINT `Activity_Latitude` CHECK (((`Latitude` >= -(90)) and (`Latitude` <= 90))),
  CONSTRAINT `Activity_Longitude` CHECK (((`Longitude` >= -(180)) and (`Longitude` <= 180))),
  CONSTRAINT `Activity_Name_No_WhiteSpace` CHECK ((not((trim(`ActivityName`) like _utf8mb4''))))
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Activity`
--

LOCK TABLES `Activity` WRITE;
/*!40000 ALTER TABLE `Activity` DISABLE KEYS */;
INSERT INTO `Activity` VALUES (4,'testActivity',89.9999,0.0001,'123 yooo'),(7,'testActivityTwo',89.9999,0.0001,'123 yooo'),(26,'PleaseWork',12.1234,0.9998,'123 AYO');
/*!40000 ALTER TABLE `Activity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `GoogleLogin`
--

DROP TABLE IF EXISTS `GoogleLogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `GoogleLogin` (
  `idGoogleLogin` int NOT NULL AUTO_INCREMENT,
  `GoogleLoginToken` varchar(45) DEFAULT NULL COMMENT 'some way to verify identity via google system. likely not a varchar.',
  PRIMARY KEY (`idGoogleLogin`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='Temporary Table for Google login info, not useful yet because i have no idea what the format is or whatever, but it''s in as a placeholder';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GoogleLogin`
--

LOCK TABLES `GoogleLogin` WRITE;
/*!40000 ALTER TABLE `GoogleLogin` DISABLE KEYS */;
/*!40000 ALTER TABLE `GoogleLogin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Itinerary`
--

DROP TABLE IF EXISTS `Itinerary`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Itinerary` (
  `ItineraryID` int NOT NULL AUTO_INCREMENT,
  `ItineraryName` varchar(45) NOT NULL,
  `StartDate` date NOT NULL,
  `EndDate` date NOT NULL,
  `CreatorID` int NOT NULL,
  PRIMARY KEY (`ItineraryID`),
  UNIQUE KEY `Unique_NoDupes` (`ItineraryName`,`StartDate`,`EndDate`,`CreatorID`),
  KEY `FK_ITINERARY_CREATOR_USER_ID_idx` (`CreatorID`),
  CONSTRAINT `FK_ITINERARY_CREATOR_USER_ID` FOREIGN KEY (`CreatorID`) REFERENCES `User` (`UserID`),
  CONSTRAINT `EndDateGreaterThanStartDate` CHECK ((`StartDate` < `EndDate`))
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='	';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Itinerary`
--

LOCK TABLES `Itinerary` WRITE;
/*!40000 ALTER TABLE `Itinerary` DISABLE KEYS */;
INSERT INTO `Itinerary` VALUES (22,'NewProcItineraryCheck','2021-12-12','2022-01-01',34),(20,'secondItinerary','2021-12-31','2022-01-22',2),(10,'ThirdTest','2020-12-30','2021-12-30',2);
/*!40000 ALTER TABLE `Itinerary` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ItineraryItem`
--

DROP TABLE IF EXISTS `ItineraryItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ItineraryItem` (
  `ItineraryItemID` int NOT NULL AUTO_INCREMENT,
  `ItineraryID` int NOT NULL,
  `ActivityID` int NOT NULL,
  `StartTime` datetime NOT NULL,
  `EndTime` datetime NOT NULL,
  `AdditionalInformation` varchar(256) DEFAULT '',
  PRIMARY KEY (`ItineraryItemID`),
  UNIQUE KEY `ActionID` (`ItineraryItemID`,`ItineraryID`,`ActivityID`),
  KEY `ItineraryID` (`ItineraryID`),
  KEY `ActivityID` (`ActivityID`),
  CONSTRAINT `ItineraryItem_ibfk_1` FOREIGN KEY (`ItineraryID`) REFERENCES `Itinerary` (`ItineraryID`),
  CONSTRAINT `ItineraryItem_ibfk_2` FOREIGN KEY (`ActivityID`) REFERENCES `Activity` (`ActivityID`),
  CONSTRAINT `Action_StartBeforeEnd` CHECK ((`StartTime` < `EndTime`))
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ItineraryItem`
--

LOCK TABLES `ItineraryItem` WRITE;
/*!40000 ALTER TABLE `ItineraryItem` DISABLE KEYS */;
INSERT INTO `ItineraryItem` VALUES (1,10,4,'2020-10-31 22:12:47','2020-11-01 22:12:47','brief description'),(2,10,7,'2020-11-20 22:12:47','2020-11-21 22:12:47','brief description'),(3,10,26,'2021-11-01 07:30:00','2021-11-01 08:00:00','AOL');
/*!40000 ALTER TABLE `ItineraryItem` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`admin`@`%`*/ /*!50003 TRIGGER `Action_BEFORE_INSERT` BEFORE INSERT ON `ItineraryItem` FOR EACH ROW BEGIN
	DECLARE msg Varchar(128);
    
    IF (EXISTS(
		SELECT Q.ItineraryItemID
        FROM ItineraryItem AS Q 
		WHERE new.StartTime between Q.StartTime AND Q.EndTime 
			OR new.EndTime between Q.StartTime AND Q.EndTime))
	THEN 
		SET MSG = concat('Error: Times overlap', new.StartTime, new.EndTime);
		SIGNAL sqlstate '45000' SET message_text = MSG;
	END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `NormalLogin`
--

DROP TABLE IF EXISTS `NormalLogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `NormalLogin` (
  `UserID` int NOT NULL,
  `HashedPassword` varchar(64) NOT NULL COMMENT 'It''s not hashed. that''s a lie. fix that pls?\n\nShould be stored in encrypted format with private key (symmetric cypher or Private/Public Key, if the DB is doing the decrypting and the API is encrypting. But for now plaintext. security isn''t important anyway.\\n',
  `Email` varchar(45) NOT NULL COMMENT 'needs validation for email',
  PRIMARY KEY (`UserID`),
  UNIQUE KEY `Email_UNIQUE` (`Email`),
  KEY `UserID_idx` (`UserID`),
  CONSTRAINT `FK_USER_ID` FOREIGN KEY (`UserID`) REFERENCES `User` (`UserID`),
  CONSTRAINT `MIN_PW_LENGTH` CHECK ((length(`HashedPassword`) >= 8))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `NormalLogin`
--

LOCK TABLES `NormalLogin` WRITE;
/*!40000 ALTER TABLE `NormalLogin` DISABLE KEYS */;
INSERT INTO `NormalLogin` VALUES (1,'AbductingWomen','chocolates@thatmakesnosense.edu'),(2,'WeAreGoingOnATrip','ImAwesome@chickenWANG.charlie'),(9,'ShepardImAReaperDoomsdayDevice','abcd@efg.hij'),(11,'adfgdsfgsdfg','randoemail@gmail.com'),(15,';\'kl;\'kl;\'kl;\'','random@email'),(17,'dfghdfghdfghdfghdfg','hdfghdfghdfghdfgh'),(18,'testtest','test@test.com'),(19,'testtest','usertest@email.com'),(20,'wertsdfg','asdfasdf@email.com'),(24,'32412341324123','12341234'),(28,'ricky123','rickjames@gmail.com'),(29,'sdfgsdfgsdfgsd','sdfgsdfg'),(30,'asdasdasda','@sample'),(31,'tooshort','abc@defg.hij'),(41,'ilikepropane','bobbyhill@gmail.com'),(42,'ohnoourtable','randomemail@tonta.com'),(43,'fgdhdfghdfgh','different@gmail.com'),(44,'gfdhfghdfghdfghdfg','differentdifferent@gmail.com');
/*!40000 ALTER TABLE `NormalLogin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary view structure for view `NormalUserView`
--

DROP TABLE IF EXISTS `NormalUserView`;
/*!50001 DROP VIEW IF EXISTS `NormalUserView`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `NormalUserView` AS SELECT 
 1 AS `UserID`,
 1 AS `ScreenName`,
 1 AS `FirstName`,
 1 AS `LastName`,
 1 AS `DateOfBirth`,
 1 AS `HashedPassword`,
 1 AS `Email`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `User`
--

DROP TABLE IF EXISTS `User`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `User` (
  `UserID` int NOT NULL AUTO_INCREMENT,
  `ScreenName` varchar(45) NOT NULL,
  `FirstName` varchar(45) DEFAULT NULL,
  `LastName` varchar(45) DEFAULT NULL,
  `DateOfBirth` date DEFAULT NULL,
  PRIMARY KEY (`UserID`),
  UNIQUE KEY `ScreenName_UNIQUE` (`ScreenName`)
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `User`
--

LOCK TABLES `User` WRITE;
/*!40000 ALTER TABLE `User` DISABLE KEYS */;
INSERT INTO `User` VALUES (1,'DrChocolates','Karen','Chakwas',NULL),(2,'Batman','Bruce','Wayne',NULL),(3,'Superman','Clark','Kent',NULL),(4,'Spiderman','Peter','Parker',NULL),(5,'Report To the Ship...','Commander','Shepard',NULL),(8,'Also Spiderman','Miles','Morales',NULL),(9,'OptimusPrime','Liara','T\'Soni',NULL),(10,'pinche',NULL,NULL,NULL),(11,'fsdsfgdgsdfg',NULL,NULL,NULL),(12,'what',NULL,NULL,NULL),(13,'real',NULL,NULL,NULL),(14,'reale',NULL,NULL,NULL),(15,'freewilly',NULL,NULL,NULL),(16,'freewilly22',NULL,NULL,NULL),(17,'gdfhdfghdfghdfgh',NULL,NULL,NULL),(18,'tester',NULL,NULL,NULL),(19,'usernametest',NULL,NULL,NULL),(20,'asdfasdf',NULL,NULL,NULL),(21,'test1',NULL,NULL,NULL),(23,'username',NULL,NULL,NULL),(24,'2134123',NULL,NULL,NULL),(25,'meHELLO',NULL,NULL,NULL),(26,'meHELLOdgfhdfgh',NULL,NULL,NULL),(27,'yoyo',NULL,NULL,NULL),(28,'rjames',NULL,NULL,NULL),(29,'sdgsdfg',NULL,NULL,NULL),(30,'sample',NULL,NULL,NULL),(31,'man',NULL,NULL,NULL),(34,'test\'fuzzy',NULL,NULL,NULL),(41,'BobbyHill','Bob','Hill','1999-01-01'),(42,'IMHERE','randy','admin','2012-10-12'),(43,'HEREHERE','admini','admini','1990-12-30'),(44,'HEREHERENOW','admini','admini','1990-12-30');
/*!40000 ALTER TABLE `User` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping events for database 'database'
--

--
-- Dumping routines for database 'database'
--
/*!50003 DROP FUNCTION IF EXISTS `FN_count_overlaps` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `FN_count_overlaps`(s DATE, e DATE) RETURNS int
    DETERMINISTIC
BEGIN
DECLARE ct INT;

SELECT COUNT (Q.PlannedActivityID) INTO ct
	FROM PlannedActivity AS Q 
    WHERE StartTime BETWEEN Q.StartTime AND Q.EndTime OR EndTime BETWEEN Q.StartTime AND Q.EndTime;
RETURN ct;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetCheckConstraintBrokenBy3819` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `GetCheckConstraintBrokenBy3819`(errorMessage varchar(16381)) RETURNS varchar(128) CHARSET utf8mb4
BEGIN
	Declare returnValue varchar(128);
	-- search from the left for this text. should be at column 1 (1 indexed).
	SET @intro = "Error Code: 3819. Check constraint '";
    -- search from the right for this text. 
    set @outro = "' is violated.";

    set @len = char_length(@intro);
	-- the text in between is the column
    set @startIndex = Locate(@intro, errorMessage) + @len;
    IF (@startIndex > @len)
    THEN
		set @endIndex = substring_index(errorMessage, @outro, -1);
		set @len = LEAST(@endIndex - @startIndex, 128);
		set returnValue = Substring(errorMessage, @startIndex, @len);
    END IF;
RETURN 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetColumnNameViolating1264` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `GetColumnNameViolating1264`(errorMessage varchar(256)) RETURNS varchar(128) CHARSET utf8mb4
BEGIN
	-- Assumes all columns we create are less than 128 characters. Error message is guarenteed to therefore be < 256 total
    
	Declare returnValue varchar(128);
	-- search from the left for this text. should be at column 1 (1 indexed).
	SET @intro = "Error Code: 1264. Out of range value for column '";
    -- search from the right for this text. 
    set @outro = "'at%";
    set @len = char_length(@intro);
	-- the text in between is the column
    set @startIndex = Locate(@intro, errorMessage) + @len;
    IF (@startIndex > @len)
    THEN
		set @endIndex = substring_index(errorMessage, @outro, -1);
		set @len = LEAST(@endIndex - @startIndex, 128);
		set returnValue = Substring(errorMessage, @startIndex, @len);
    END IF;
    
	RETURN returnValue;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetUniqueKeyConstraintBrokenBy1062` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `GetUniqueKeyConstraintBrokenBy1062`(errorMessage varchar(16381)) RETURNS varchar(128) CHARSET utf8mb4
BEGIN
	-- 16381 is the largest size a utf8mb4 can be in mysql (roughly, anyway). I hate magic numbers as much as the rest of you, but i've got no choice here.
	Declare returnValue varchar(128);
	-- search from the end, because the data itself might be all full of shit like SQL injection.
    -- we can assume our constraints won't have invalid shit.
    -- last character is a single quote
    set @intro = "'for key '";
    -- set @outro = "'";
    set @len = char_length(@intro);
	-- the text in between is the column
    set @startIndex = substring_index(errorMessage, @intro, -1);
    IF (@startIndex > @len)
    THEN
		set @count = LEAST(char_length(errorMessage) - startLength - 1, 128);
		set returnValue = Substring(errorMessage, @startIndex, @count);
    END IF;
    
	RETURN returnValue;
RETURN 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateItinerary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateItinerary`(IN title VARCHAR(45), IN firstDay DATE, IN lastDay DATE, IN creator INT,
OUT errorCode int, OUT errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Not Unique: This user already has an itinerary with this name, starting and ending at this point.
     * 2: Invalid Start/End Days - the start is after the end.
     * 3: Invalid Creator ID. This is an error caused by the API, and should never happen.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        -- Duplicate Unqiue key
		IF (@errno = 1062)
        THEN
			SET errorCode = 1;
            SET errorMessage = "An itinerary with this name, start date, and end date already exists";
        -- Check constraint fails.
        ELSEIF (@errno = 3819)
		THEN 
			SET errorCode = 2;
			SET errorMessage = CONCAT("StartDate '", firstDay, "', is after the EndDate '", lastDay, "'");
		-- User ID is invalid. This means the API is broken.
		ELSEIF (@errno = 1452)
		THEN
			SET errorCode = 3;
			SET errorMessage = "User ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    SET errorMessage = '';
    
	INSERT INTO Itinerary 
    (ItineraryName, StartDate, EndDate, CreatorID)
    VALUE (title, firstDay, lastDay, creator);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateItineraryItemWithActivity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateItineraryItemWithActivity`(IN title VARCHAR(45), IN lat decimal(6,4), IN lon decimal(7,4), 
IN addr varchar(256), IN ItineraryIdentifier int, IN startTime DateTime, IN endTime DateTime, IN descript varchar(256),
out errorCode int, out errorMessage varchar(128))
BEGIN
	-- About: adds an itinerary item to the database. we retrieve an activity with the same data if one exists, 
    -- or insert one if not. then we use that id when adding the itinerary item.
    -- Error Codes:
    -- NOTE: 2-4 are inherited from Activity. There is no error 1, as error 1 is actually legal here.
        -- 2: Invalid coordinate - latitude.
        -- 3: Invalid coordinate - longitude.
        -- 4: Invalid activity name/title. It must not be whitespace, empty, or null.
	-- The remainder deal with itinerary items.
        -- 5: Start occurs after end.
        -- 6: start or end Overlaps with items already on the itinerary.
        -- 7: Invalid ItineraryID. This is an API error.
    START TRANSACTION;
	SET errorCode = 0;
	set errorMessage = '';
        
	CALL CreateStandaloneActivity(title, lat, lon, addr, errorCode, errorMessage);
	-- a duplicate is ok, we'll simply reference it instead of adding. 
	IF (errorCode = 1)
	THEN 
		set errorCode = 0;
	END IF;
	
	IF (errorCode = 0)
	THEN
	BEGIN
		DECLARE exit handler for SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			-- ItineraryID invalid
			IF (@errno = 1452)
			THEN
				SET errorCode = 7;
				SET errorMessage = "ItineraryID provided is invalid. this is an API error.";
			-- Check constraint. 
			ELSEIF (@errno = 3819 OR @errno = 1644)
			THEN 
				Set errorCode = 5;
				SET errorMessage = "Start Time occurs after End Time";
			-- Before Trigger Error.
			ELSEIF (@errno = 45000)
			THEN 
				Set errorCode = 6;
				SET ErrorMessage = "This item overlaps items already on the itinerary";
			-- Unhandled error.
			ELSE 
				SET errorCode = @errNo;
				SET errorMessage = @text;
			END IF;
		END;
            
		SELECT A.ActivityID INTO @activityID FROM Activity AS A
		where A.Latitude = lat AND A.Longitude = lon AND A.ActivityName = title LIMIT 1;
            
		Insert Into `ItineraryItem` (ItineraryID, ActivityID, StartTime, EndTime, AdditionalInformation)
		VALUE (itineraryIdentifier, @activityID, startTime, endTime, descript);
	END;
	END IF;
    
    IF (errorCode != 0)
    THEN ROLLBACK;
    ELSE COMMIT;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateItineraryWithActivitiesAndItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateItineraryWithActivitiesAndItems`(IN itineraryTitle varchar(45), IN itineraryStart DATE, 
	IN itineraryEnd DATE, IN creator int, IN activityData JSON, OUT errorCode int, OUT errorMessage varchar(128))
BEGIN
	-- Hoo boy, this is a huge clusterfuck.
    
	/* Error Codes:
    -- Note: From The create itinerary.
     * 1: Not Unique: This user already has an itinerary with this name, starting and ending at this point.
     * 2: Invalid Start/End Days - the start is after the end.
     * 3: Invalid Creator ID. This is an error caused by the API, and should never happen.
     
     */
	Start Transaction;
	
    SET errorCode = 0;
    SET errorMessage = '';
    -- reuse another proc so i don't go insane.
    CALL CreateItinerary(itineraryTitle, itineraryStart, itineraryEnd, creator, errorCode, errorMessage);
    -- if still valid
    IF (errorCode = 0)
    THEN
		-- retrieve the corresponding id
		SELECT I.ItineraryID INTO @itineraryID FROM Itinerary AS I 
        WHERE I.ItineraryName = itineraryTitle AND I.StartDate = itineraryStart 
			AND I.EndDate = itineraryEnd AND I.CreatorID = creator LIMIT 1;
		
        -- now dump all the json into a temporary table. if the activity already exists, retrieve the id, otherwise leave it null.
		CREATE TEMPORARY TABLE UI_Data 
		SELECT A.`ActivityID`, RAW.`ActivityName`, RAW.`Latitude`, RAW.`Longitude`, RAW.`Address`, 
			RAW.`StartTime`, RAW.`EndTine`, RAW.`AdditionalInformation`
		FROM JSON_TABLE(
			activityData, '$[*]' COLUMNS(
			`ActivityName` varchar(45) PATH "$.Name", 
			`Latitude` decimal(6,4) PATH "$.Latitude",
			`Longitude` decimal(7,4) PATH "$.Longitude",
			`Address` varchar(256) PATH "$.Address",
			`StartTime` DATETIME PATH "$.StartTime",
			`EndTine` DATETIME PATH "$.EndTime",
			`AdditionalInformation` varchar(256) PATH "$.AdditionalInformation")) AS RAW
		LEFT JOIN Activity AS A ON RAW.`ActivityName` = A.`ActivityName` 
			AND RAW.`Latitude` = A.`Latitude` AND RAW.`Longitude` = A.`Longitude`;
	
		-- now, insert all the ones we couldn't match. distinct prevents us from trying to add a new activity multiple times
		INSERT INTO Activity (`ActivityName`, `Latitude`, `Longitude`, `Address`)
		SELECT DISTINCT U.`ActivityName`, U.`Latitude`, U.`Longitude`, U.`Address` 
		FROM UI_Data AS U WHERE U.`ActivityID` IS NULL;
        
        -- now, another doozy. we're gonna add all the itinerary items, but we may not have the id. SO, a union
        INSERT INTO ItineraryItem(ItineraryID, ActivityID, StartTime, EndTime, AdditionalInformation)
        -- the first select gets the items where the Activity was known when we made that temp table.
        SELECT @itineraryID, U.ActivityID, U.`StartTime`, U.`EndTine`, U.AdditionalInformation FROM UI_Data AS U WHERE U.ActivityID IS NOT NULL
        UNION 
        -- the second select is the ones we just added. we can get the ID via a join and all the equal checks. 
        SELECT @itineraryID, A.`ActivityID`, U.`StartTime`, U.`EndTine`, U.AdditionalInformation FROM UI_Data AS U 
        INNER JOIN Activity AS A ON U.`ActivityName` = A.`ActivityName` 
			AND U.`Latitude` = A.`Latitude` AND U.`Longitude` = A.`Longitude`
		WHERE U.ActivityID IS NULL;
    END IF;
    
    IF (errorCode != 0)
    THEN ROLLBACK;
    ELSE COMMIT;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateStandaloneActivity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateStandaloneActivity`(IN title VARCHAR(45), IN lat decimal(6,4), IN lon decimal(7,4), IN addr varchar(256),
out errorCode int, out errorMessage varchar(128))
BEGIN
	-- Error Codes:
		-- 1: Duplicate - theres already an activity with the given title, lat, and long in the database
        -- 2: Invalid coordinate - latitude.
        -- 3: Invalid coordinate - longitude.
        -- 4: Invalid activity name/title. It must not be whitespace, empty, or null.
    -- Note that address is not validated in any way. we use coordinates, and expect the google api to give us a valid address.
    -- It's essentially a hint so you don't need to go to the Google API all the time.
    DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        -- Duplicate Unqiue key
		IF (@errno = 1062)
        THEN
			SET errorCode = 1;
            SET errorMessage = "An activity with this name and latitude/longitude coordinate pair already exists";
        -- lat or long fails from out or range error
        ELSEIF (@errno = 1264)
        THEN 
			SET @src = GetColumnNameViolating1264(@text);
            IF (@src LIKE `Latitude`)
            THEN 
				SET errorCode = 2;
                Set errorMessage = "Latitude is out of range";
            ELSEIF (@src LIKE `Longitude`)
            THEN
				SET errorCode = 3;
                Set errorMessage = "Longitude is out of range";
            -- something else out of range. unexpected.
            ELSE
				SET errorCode = @errNo;
				SET errorMessage = @text;
            END IF;
        -- Check constraint fails - in numeric range but out of our range
        ELSEIF (@errno = 3819)
		THEN 
			SET @src = GetCheckConstraintBrokenBy3819(@text);
             IF (@src LIKE `Activity_Latitude`)
            THEN 
				SET errorCode = 2;
                Set errorMessage = "Latitude is out of range";
            ELSEIF (@src LIKE `Activity_Longitude`)
            THEN
				SET errorCode = 3;
                Set errorMessage = "Longitude is out of range";
			ELSEIF (@src LIKE `Activity_Name_No_WhiteSpace`)
            THEN
				SET errorCode = 4;
                Set errorMessage = "Activity name must be a valid string";
            -- something else broke a constraint. unexpected.
            ELSE
				SET errorCode = @errNo;
				SET errorMessage = @text;
            END IF;
		
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    SET errorMessage = '';
	
    INSERT INTO `database`.`Activity` (`ActivityName`, `Latitude`, `Longitude`, `Address`) 
    VALUES (title, lat, lon, addr);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateUserNormalLogin` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateUserNormalLogin`(screen varchar(45), IN fName varchar(45), IN lName varchar(45), IN DOB DATE, IN email varchar(45),
IN pass varchar(64), out errorCode int, out errorMessage varchar(128))
BEGIN
	/* ERROR CODES
     * 1: Email already taken.
     * 2: Screen name already taken.
     * 3: Password invalid (too short, needs to be 8+ characters, maxed at 64)
     * 4: Email invalid format NOT IMPLEMENTED YET!
     */
    SET errorCode = 0;
    SET errorMessage = '';
    START TRANSACTION;
    CREATE TEMPORARY TABLE Invalids 
		SELECT U.ScreenName AS ScreenName, N.Email AS Email FROM `User` AS U LEFT JOIN NormalLogin as N ON U.UserID = N.UserID
		WHERE U.ScreenName = screen OR N.Email = email;
        
	If (Exists(Select Email From Invalids WHERE Email IS NOT NULL))
    THEN 
		SET errorCode = 1;
        SET errorMessage = CONCAT("A user with the email '", email, "' is already registered.");
	ELSEIF (Exists(Select ScreenName FROM Invalids))
	THEN
		SET errorCode = 2;
		SET errorMessage = CONCAT("The screen name '", screen, "' is already taken.");
	ELSE 
		INSERT INTO User (ScreenName, FirstName, LastName, DateOfBirth)
		VALUE(screen, fName, lName, DOB);
	END IF;
    
    IF (errorCode = 0)
    THEN
		BEGIN
			DECLARE exit handler for SQLEXCEPTION
			BEGIN
				GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
                -- Check constraint fails.
                IF (@errno = 3819)
                THEN 
					SET errorCode = 3;
                    SET errorMessage = CONCAT("Password, '", pass, "' is invalid");
				-- NOTE: email constraint would require parsing the error message to see which constraint failed.
                
                -- User ID is invalid. This means this stored proc is broken.
                ELSEIF (@errno = 1452)
                THEN
					SET errorCode = @errNo;
                    SET errorMessage = "User ID does not exist, the stored proc is broken somehow";
				-- Unhandled error.
				ELSE 
					SET errorCode = @errNo;
                    SET errorMessage = @text;
				END IF;
                
                ROLLBACK;
			END;
            
			SELECT K.UserID INTO @temp FROM User as K WHERE K.ScreenName = screen;
    
			Insert Into NormalLogin (UserID, Email, HashedPassword)
			VALUE (@temp, email, pass);
		END;
	END IF;
    
    IF (errorCode = 0)
    THEN 
		COMMIT;
	ELSE
		ROLLBACK;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindActivitiesWithinACertainDistanceOf` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindActivitiesWithinACertainDistanceOf`(IN LatCoordinate Decimal(6,4), IN LongCoordinate Decimal(7,4), IN MaxDistanceAwayInMiles DOUBLE)
BEGIN
	SELECT
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
        `A`.`Address` AS `Address`,
        -- Taken from stack overflow, which in turn took it from the Google Maps API. Distance formula, coordingates to miles.
        (
			3959 * acos (
			cos ( radians(LatCoordinate) )
			* cos( radians(  `A`.`ActivityLatitudeCoordinate` ) )
			* cos( radians( `A`.`ActivityLongitudeCoordinate` ) - radians(LongCoordinate) )
			+ sin ( radians(LatCoordinate) )
			* sin( radians( `A`.`ActivityLatitudeCoordinate`) )
		)) AS `DistanceAway`
    FROM `Activity`
	Having  `DistanceAway` <= MaxDistanceAwayInMiles
    ORDER BY `DistanceAway` ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindActivitiesWithNamesLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindActivitiesWithNamesLike`(searchTitle varchar(45))
BEGIN
	SELECT 
		`A`.`ActivityID` AS `ActivityID`,
		`A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
        `A`.`Address` AS `Address`,
        (BINARY `ActivityName` LIKE searchTitle) AS IsExactMatch
        FROM Activity AS `A` 
        WHERE searchTitle LIKE CONCAT("%", searchTitle, "%")
        ORDER BY IsExactMatch DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindFullItinerariesWithActivitiesWithNamesLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindFullItinerariesWithActivitiesWithNamesLike`(searchTitle varchar(45))
BEGIN
	SELECT 
		`I`.`ItineraryID` AS `ItineraryID`,
		`I`.`ItineraryName` AS `ItineraryName`,
		`I`.`StartDate` AS `StartDate`,
		`I`.`EndDate` AS `EndDate`,
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
        `A`.`Address` AS `Address`,
		`Q`.`StartTime` AS `StartTime`,
		`Q`.`EndTime` AS `EndTime`,
        `Q`.`AdditionalInformation` AS `AdditionalInformation`,
        (BINARY `ActivityName` LIKE searchTitle) AS IsExactMatch
        FROM 
			`Itinerary` AS `I` INNER JOIN `ItineraryItem` AS `Q` ON (`I`.`ItineraryID` = `Q`.`ItineraryID`)
            INNER JOIN `Activity` AS `A` ON (`Q`.`ActivityID` = `A`.`ActivityID`)
        WHERE searchTitle LIKE CONCAT("%", searchTitle, "%")
        ORDER BY IsExactMatch DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindItinerariesWithinDistanceOf` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindItinerariesWithinDistanceOf`(IN LatCoordinate Decimal(6,4), IN LongCoordinate Decimal(7,4), IN MaxDistanceAwayInMiles DOUBLE)
BEGIN
	SELECT
		`I`.`ItineraryID` AS `ItineraryID`,
		`I`.`ItineraryName` AS `ItineraryName`,
		`I`.`StartDate` AS `StartDate`,
		`I`.`EndDate` AS `EndDate`,
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
        `A`.`Address` AS `Address`,
		`Q`.`StartTime` AS `StartTime`,
		`Q`.`EndTime` AS `EndTime`,
        `Q`.`AdditionalInformation` AS `AdditionalInformation`,
        -- Taken from stack overflow, which in turn took it from the Google Maps API. Distance formula, coordingates to miles.
        (
			3959 * acos (
			cos ( radians(LatCoordinate) )
			* cos( radians(  `A`.`Latitude` ) )
			* cos( radians( `A`.`Longitude` ) - radians(LongCoordinate) )
			+ sin ( radians(LatCoordinate) )
			* sin( radians( `A`.`Latitude`) )
		)) AS `DistanceAway`
    FROM
        ((`Itinerary` `I`
        INNER JOIN `ItineraryItem` `Q` ON ((`I`.`ItineraryID` = `Q`.`ItineraryID`)))
        INNER JOIN `Activity` `A` ON ((`Q`.`ActivityID` = `A`.`ActivityID`)))
	 Having 
		`DistanceAway` <= MaxDistanceAwayInMiles
		;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindUsersWithNameLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindUsersWithNameLike`(IN screen VARCHAR(45))
BEGIN
	SELECT  `UserID`, `ScreenName`, `FirstName`, `LastName`,
    (BINARY `ScreenName` LIKE screen) AS IsExactMatch
    FROM `User` WHERE `ScreenName` LIKE CONCAT('%', screen, '%')
    ORDER BY IsExactMatch DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RetrieveActivitiesForGivenItinerary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `RetrieveActivitiesForGivenItinerary`(IN ItineraryIdentifier int, out errorCode int, out errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Invalid Itinerary ID. This is an API error. As of this writing, this will never occur.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		-- Itinerary ID is invalid. This means the API is broken.
		IF (@errno = 1452)
		THEN
			SET errorCode = 1;
			SET errorMessage = "Itinerary ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    Set errorMessage = '';
    
	SELECT 
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
        `A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
        `A`.`Address` AS `Address`,
		`Q`.`StartTime` AS `StartTime`,
		`Q`.`EndTime` AS `EndTime`,
        `Q`.`AdditionalInformation` AS `AdditionalInformation`
    FROM
		`ItineraryItem` AS `Q` INNER JOIN `Activity` AS `A` ON `Q`.`ActivityID` = `A`.`ActivityID`
	WHERE Q.ItineraryID = ItineraryIdentifier;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RetrieveAllItinerariesForUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `RetrieveAllItinerariesForUser`(IN UserID int, OUT errorCode int, out errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Invalid User ID. This is an API error.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		-- USER ID is invalid. This means the API is broken. As far as i can tell, as of this writing this will never proc.
		IF (@errno = 1452)
		THEN
			SET errorCode = 1;
			SET errorMessage = "User ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    Set errorMessage = '';
	
    SELECT 
		`I`.`ItineraryID` AS `ItineraryID`,
        `I`.`ItineraryName` AS `ItineraryName`,
        `I`.`StartDate` AS `StartDate`,
        `I`.`EndDate` AS `EndDate`
    FROM
        `Itinerary` AS `I`
	WHERE I.CreatorID = UserID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RetrieveAllItineraryInformationForUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_ALL_TABLES' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `RetrieveAllItineraryInformationForUser`(IN UserID int, OUT errorCode int, out errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Invalid User ID. This is an API error. AFAIK this will never proc, as of this writing.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		-- USER ID is invalid. This means the API is broken.
		IF (@errno = 1452)
		THEN
			SET errorCode = 1;
			SET errorMessage = "User ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    Set errorMessage = '';
	
	SELECT 
        `I`.`ItineraryID` AS `ItineraryID`,
		`I`.`ItineraryName` AS `ItineraryName`,
		`I`.`StartDate` AS `StartDate`,
		`I`.`EndDate` AS `EndDate`,
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
		`Q`.`StartTime` AS `StartTime`,
		`Q`.`EndTime` AS `EndTime`,
        `Q`.`AdditionalInformation` AS `AdditionalInformation`
   FROM
        ((`Itinerary` `I`
        LEFT JOIN `ItineraryItem` `Q` ON ((`I`.`ItineraryID` = `Q`.`ItineraryID`)))
        INNER JOIN `Activity` `A` ON ((`Q`.`ActivityID` = `A`.`ActivityID`)))
	WHERE I.CreatorID = UserID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TryLoginGetID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `TryLoginGetID`(IN email VARCHAR(45), IN pass VARCHAR(64), OUT id INT, out errorCode int, out errorMessage varChar(128))
BEGIN
	/* Error Codes***:
     * 1: There is no user with this email in the database.
     * 2: Invalid Password.
     *** This is not a true error; the query runs correctly, but as far as the UI is concerned the result is the same. ***
     */
	
    SELECT K.UserID, K.HashedPassword into @tempID, @pass FROM NormalLogin as K WHERE K.Email = email LIMIT 1;

    IF (@tempID IS NULL)
    THEN
		SET errorCode = 1;
        SET errorMessage = "No user with that email exists";
	ELSEIF (NOT BINARY @pass = pass)
    THEN
		SET errorCode = 2;
        SET errorMessage = "Invalid Password";
	ELSE
		SET errorCode = 0;
        SET errorMessage = '';
        Set id = @tempID;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Final view structure for view `NormalUserView`
--

/*!50001 DROP VIEW IF EXISTS `NormalUserView`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`admin`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `NormalUserView` AS select `U`.`UserID` AS `UserID`,`U`.`ScreenName` AS `ScreenName`,`U`.`FirstName` AS `FirstName`,`U`.`LastName` AS `LastName`,`U`.`DateOfBirth` AS `DateOfBirth`,`N`.`HashedPassword` AS `HashedPassword`,`N`.`Email` AS `Email` from (`User` `U` join `NormalLogin` `N` on((`U`.`UserID` = `N`.`UserID`))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-11-01  3:52:42