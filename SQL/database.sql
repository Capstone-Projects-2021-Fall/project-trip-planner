-- This is auto-generated, changes here will not be reflected on the database. Do not edit this file.

CREATE DATABASE  IF NOT EXISTS `database` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `database`;
-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: tripplannerdb.cmmyrzbau9mp.us-west-2.rds.amazonaws.com    Database: database
-- ------------------------------------------------------
-- Server version	8.0.23

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Table structure for table `Activity`
--

DROP TABLE IF EXISTS `Activity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Activity` (
  `ActivityID` int NOT NULL AUTO_INCREMENT,
  `ActivityName` varchar(45) NOT NULL,
  `Latitude` decimal(6,4) NOT NULL,
  `Longitude` decimal(7,4) NOT NULL,
  `Address` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`ActivityID`),
  UNIQUE KEY `ActivityName` (`ActivityName`,`Latitude`,`Longitude`),
  CONSTRAINT `Activity_chk_1` CHECK ((not((trim(`ActivityName`) like _utf8mb4'')))),
  CONSTRAINT `Activity_chk_2` CHECK (((`Latitude` >= -(90)) and (`Latitude` <= 90))),
  CONSTRAINT `Activity_chk_3` CHECK (((`Longitude` >= -(180)) and (`Longitude` <= 180)))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Activity`
--

LOCK TABLES `Activity` WRITE;
/*!40000 ALTER TABLE `Activity` DISABLE KEYS */;
/*!40000 ALTER TABLE `Activity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary view structure for view `DefaultUIView`
--

DROP TABLE IF EXISTS `DefaultUIView`;
/*!50001 DROP VIEW IF EXISTS `DefaultUIView`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `DefaultUIView` AS SELECT 
 1 AS `ItineraryID`,
 1 AS `ItineraryName`,
 1 AS `StartDate`,
 1 AS `EndDate`,
 1 AS `ActivityID`,
 1 AS `ActivityName`,
 1 AS `Latitude`,
 1 AS `Longitude`,
 1 AS `StartTime`,
 1 AS `EndTime`,
 1 AS `Description`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `GoogleLogin`
--

DROP TABLE IF EXISTS `GoogleLogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `GoogleLogin` (
  `idGoogleLogin` int NOT NULL AUTO_INCREMENT,
  `GoogleLoginToken` varchar(45) DEFAULT NULL COMMENT 'some way to verify identity via google system. likely not a varchar.',
  PRIMARY KEY (`idGoogleLogin`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='Temporary Table for Google login info, not useful yet because i have no idea what the format is or whatever, but it''s in as a placeholder';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GoogleLogin`
--

LOCK TABLES `GoogleLogin` WRITE;
/*!40000 ALTER TABLE `GoogleLogin` DISABLE KEYS */;
/*!40000 ALTER TABLE `GoogleLogin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Itinerary`
--

DROP TABLE IF EXISTS `Itinerary`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Itinerary` (
  `ItineraryID` int NOT NULL AUTO_INCREMENT,
  `ItineraryName` varchar(45) NOT NULL,
  `StartDate` date NOT NULL,
  `EndDate` date NOT NULL,
  `CreatorID` int NOT NULL,
  PRIMARY KEY (`ItineraryID`),
  UNIQUE KEY `Unique_NoDupes` (`ItineraryName`,`StartDate`,`EndDate`,`CreatorID`),
  KEY `FK_ITINERARY_CREATOR_USER_ID_idx` (`CreatorID`),
  CONSTRAINT `FK_ITINERARY_CREATOR_USER_ID` FOREIGN KEY (`CreatorID`) REFERENCES `User` (`UserID`),
  CONSTRAINT `EndDateGreaterThanStartDate` CHECK ((`StartDate` < `EndDate`))
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='	';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Itinerary`
--

LOCK TABLES `Itinerary` WRITE;
/*!40000 ALTER TABLE `Itinerary` DISABLE KEYS */;
INSERT INTO `Itinerary` VALUES (20,'secondItinerary','2021-12-31','2022-01-22',2),(10,'ThirdTest','2020-12-30','2021-12-30',2);
/*!40000 ALTER TABLE `Itinerary` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ItineraryItem`
--

DROP TABLE IF EXISTS `ItineraryItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ItineraryItem` (
  `ItineraryItemID` int NOT NULL AUTO_INCREMENT,
  `ItineraryID` int NOT NULL,
  `ActivityID` int NOT NULL,
  `StartTime` datetime NOT NULL,
  `EndTime` datetime NOT NULL,
  `Description` varchar(256) DEFAULT '',
  PRIMARY KEY (`ItineraryItemID`),
  UNIQUE KEY `ActionID` (`ItineraryItemID`,`ItineraryID`,`ActivityID`),
  KEY `ItineraryID` (`ItineraryID`),
  KEY `ActivityID` (`ActivityID`),
  CONSTRAINT `ItineraryItem_ibfk_1` FOREIGN KEY (`ItineraryID`) REFERENCES `Itinerary` (`ItineraryID`),
  CONSTRAINT `ItineraryItem_ibfk_2` FOREIGN KEY (`ActivityID`) REFERENCES `Activity` (`ActivityID`),
  CONSTRAINT `Action_StartBeforeEnd` CHECK ((`StartTime` < `EndTime`))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ItineraryItem`
--

LOCK TABLES `ItineraryItem` WRITE;
/*!40000 ALTER TABLE `ItineraryItem` DISABLE KEYS */;
/*!40000 ALTER TABLE `ItineraryItem` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`admin`@`%`*/ /*!50003 TRIGGER `Action_BEFORE_INSERT` BEFORE INSERT ON `ItineraryItem` FOR EACH ROW BEGIN
	DECLARE msg Varchar(128);
    
    IF (EXISTS(
		SELECT Q.ActionID 
        FROM `Action` AS Q 
		WHERE new.StartTime between Q.StartTime AND Q.EndTime 
			OR new.EndTime between Q.StartTime AND Q.EndTime))
	THEN 
		SET MSG = concat('Error: Times overlap', new.StartTime, new.EndTime);
		SIGNAL sqlstate '45000' SET message_text = MSG;
	END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `NormalLogin`
--

DROP TABLE IF EXISTS `NormalLogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `NormalLogin` (
  `UserId` int NOT NULL,
  `HashedPassword` varchar(64) NOT NULL COMMENT 'It''s not hashed. that''s a lie. fix that pls?\n\nShould be stored in encrypted format with private key (symmetric cypher or Private/Public Key, if the DB is doing the decrypting and the API is encrypting. But for now plaintext. security isn''t important anyway.\\n',
  `Email` varchar(45) NOT NULL COMMENT 'needs validation for email',
  PRIMARY KEY (`UserId`),
  UNIQUE KEY `Email_UNIQUE` (`Email`),
  KEY `UserID_idx` (`UserId`),
  CONSTRAINT `FK_USER_ID` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserID`),
  CONSTRAINT `MIN_PW_LENGTH` CHECK ((length(`HashedPassword`) >= 8))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `NormalLogin`
--

LOCK TABLES `NormalLogin` WRITE;
/*!40000 ALTER TABLE `NormalLogin` DISABLE KEYS */;
INSERT INTO `NormalLogin` VALUES (1,'AbductingWomen','chocolates@thatmakesnosense.edu'),(2,'WeAreGoingOnATrip','ImAwesome@chickenWANG.charlie'),(9,'ShepardImAReaperDoomsdayDevice','abcd@efg.hij'),(11,'adfgdsfgsdfg','randoemail@gmail.com'),(15,';\'kl;\'kl;\'kl;\'','random@email'),(17,'dfghdfghdfghdfghdfg','hdfghdfghdfghdfgh'),(18,'testtest','test@test.com'),(19,'testtest','usertest@email.com'),(20,'wertsdfg','asdfasdf@email.com'),(24,'32412341324123','12341234'),(28,'ricky123','rickjames@gmail.com'),(29,'sdfgsdfgsdfgsd','sdfgsdfg'),(30,'asdasdasda','@sample'),(31,'tooshort','abc@defg.hij');
/*!40000 ALTER TABLE `NormalLogin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `User`
--

DROP TABLE IF EXISTS `User`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `User` (
  `UserID` int NOT NULL AUTO_INCREMENT,
  `ScreenName` varchar(45) NOT NULL,
  `FirstName` varchar(45) DEFAULT NULL,
  `LastName` varchar(45) DEFAULT NULL,
  `DateOfBirth` datetime DEFAULT NULL,
  PRIMARY KEY (`UserID`),
  UNIQUE KEY `ScreenName_UNIQUE` (`ScreenName`)
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `User`
--

LOCK TABLES `User` WRITE;
/*!40000 ALTER TABLE `User` DISABLE KEYS */;
INSERT INTO `User` VALUES (1,'DrChocolates','Karen','Chakwas',NULL),(2,'Batman','Bruce','Wayne',NULL),(3,'Superman','Clark','Kent',NULL),(4,'Spiderman','Peter','Parker',NULL),(5,'Report To the Ship...','Commander','Shepard',NULL),(8,'Also Spiderman','Miles','Morales',NULL),(9,'OptimusPrime','Liara','T\'Soni',NULL),(10,'pinche',NULL,NULL,NULL),(11,'fsdsfgdgsdfg',NULL,NULL,NULL),(12,'what',NULL,NULL,NULL),(13,'real',NULL,NULL,NULL),(14,'reale',NULL,NULL,NULL),(15,'freewilly',NULL,NULL,NULL),(16,'freewilly22',NULL,NULL,NULL),(17,'gdfhdfghdfghdfgh',NULL,NULL,NULL),(18,'tester',NULL,NULL,NULL),(19,'usernametest',NULL,NULL,NULL),(20,'asdfasdf',NULL,NULL,NULL),(21,'test1',NULL,NULL,NULL),(23,'username',NULL,NULL,NULL),(24,'2134123',NULL,NULL,NULL),(25,'meHELLO',NULL,NULL,NULL),(26,'meHELLOdgfhdfgh',NULL,NULL,NULL),(27,'yoyo',NULL,NULL,NULL),(28,'rjames',NULL,NULL,NULL),(29,'sdgsdfg',NULL,NULL,NULL),(30,'sample',NULL,NULL,NULL),(31,'man',NULL,NULL,NULL),(34,'test\'fuzzy',NULL,NULL,NULL);
/*!40000 ALTER TABLE `User` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping events for database 'database'
--

--
-- Dumping routines for database 'database'
--
/*!50003 DROP FUNCTION IF EXISTS `FN_count_overlaps` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `FN_count_overlaps`(s DATE, e DATE) RETURNS int
    DETERMINISTIC
BEGIN
DECLARE ct INT;

SELECT COUNT (Q.PlannedActivityID) INTO ct
	FROM PlannedActivity AS Q 
    WHERE StartTime BETWEEN Q.StartTime AND Q.EndTime OR EndTime BETWEEN Q.StartTime AND Q.EndTime;
RETURN ct;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `RetrieveEntryFrom1062` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `RetrieveEntryFrom1062`(errorMessage VARCHAR(128)) RETURNS varchar(128) CHARSET utf8mb4
BEGIN
    DECLARE FuzzyEndFix varChar(128);
    DECLARE len int;
    DECLARE startIndex int;
    declare endIndex int;
    DECLARE returnValue varChar(128);
    
    SET @startDelim = "Duplicate entry '";
    SET @endDelim = "' for key '";
    SET len = CHAR_LENGTH(@startDelim);
    SET startIndex = LOCATE(@startDelim, errorMessage) + len;
    
    IF (startIndex > len)
    THEN 
		Set FuzzyEndFix = substring_index(errorMessage, @endDelim,-1);
		SET endIndex = char_length(errorMessage) -  char_length(FuzzyEndFix) - char_length(@endDelim);
		SET returnValue = SUBSTRING(errorMessage, startIndex, endIndex - startIndex);
    END IF;
    
    return returnValue;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `RetriveConstraintFrom1062` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` FUNCTION `RetriveConstraintFrom1062`(errorMessage varchar(128)) RETURNS varchar(128) CHARSET utf8mb4
BEGIN

	SET @endDelim = "' for key '";
	Set @FuzzyEndFix = substring_index(errorMessage, @endDelim,-1);
	return substring(@FuzzyEndFix, 1, char_length(@FuzzyEndFix) - 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateItinerary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateItinerary`(IN title VARCHAR(45), IN firstDay DATE, IN lastDay DATE, IN creator INT,
OUT errorCode int, OUT errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Not Unique: This user already has an itinerary with this name, starting and ending at this point.
     * 2: Invalid Start/End Days - the start is after the end.
     * 3: Invalid Creator ID. This is an error caused by the API, and should never happen.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        -- Duplicate Unqiue key
		IF (@errno = 1062)
        THEN
			SET errorCode = 1;
            SET errorMessage = "An itinerary with this name, start date, and end date already exists";
        -- Check constraint fails.
        ELSEIF (@errno = 3819)
		THEN 
			SET errorCode = 2;
			SET errorMessage = CONCAT("StartDate '", firstDay, "', is after the EndDate '", lastDay, "'");
		-- User ID is invalid. This means the API is broken.
		ELSEIF (@errno = 1452)
		THEN
			SET errorCode = 2;
			SET errorMessage = "User ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    SET errorMessage = '';
    
	INSERT INTO Itinerary 
    (ItineraryName, StartDate, EndDate, CreatorID)
    VALUE (title, firstDay, lastDay, creator);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CreateUserNormalLogin` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `CreateUserNormalLogin`(screen varchar(45), IN fName varchar(45), IN lName varchar(45), IN DOB DATETIME, IN email varchar(45),
IN pass varchar(64), out errorCode int, out errorMessage varchar(256))
BEGIN
	/* ERROR CODES
     * 1: Email already taken.
     * 2: Screen name already taken.
     * 3: Password invalid (too short, needs to be 8+ characters, maxed at 64)
     * 4: Email invalid format NOT IMPLEMENTED YET!
     */
    SET errorCode = 0;
    SET errorMessage = '';
    START TRANSACTION;
    CREATE TEMPORARY TABLE Invalids 
		SELECT U.ScreenName AS ScreenName, N.Email AS Email FROM `User` AS U LEFT JOIN NormalLogin as N ON U.UserID = N.UserID
		WHERE U.ScreenName = screen OR N.Email = email;
        
	If (Exists(Select Email From Invalids WHERE Email IS NOT NULL))
    THEN 
		SET errorCode = 1;
        SET errorMessage = CONCAT("A user with the email '", email, "' is already registered.");
	ELSEIF (Exists(Select ScreenName FROM Invalids))
	THEN
		SET errorCode = 2;
		SET errorMessage = CONCAT("The screen name '", screen, "' is already taken.");
	ELSE 
		INSERT INTO User (ScreenName, FirstName, LastName, DateOfBirth)
		VALUE(screen, fName, lName, DOB);
	END IF;
    
    IF (errorCode = 0)
    THEN
		BEGIN
			DECLARE exit handler for SQLEXCEPTION
			BEGIN
				GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
                -- Check constraint fails.
                IF (@errno = 3819)
                THEN 
					SET errorCode = 3;
                    SET errorMessage = CONCAT("Password, '", pass, "' is invalid");
				-- NOTE: email constraint would require parsing the error message to see which constraint failed.
                
                -- User ID is invalid. This means this stored proc is broken.
                ELSEIF (@errno = 1452)
                THEN
					SET errorCode = @errNo;
                    SET errorMessage = "User ID does not exist, the stored proc is broken somehow";
				-- Unhandled error.
				ELSE 
					SET errorCode = @errNo;
                    SET errorMessage = @text;
				END IF;
                
                ROLLBACK;
			END;
            
			SELECT K.UserID INTO @temp FROM User as K WHERE K.ScreenName = screen;
    
			Insert Into NormalLogin (UserID, Email, HashedPassword)
			VALUE (@temp, email, pass);
		END;
	END IF;
    
    IF (errorCode = 0)
    THEN 
		COMMIT;
	ELSE
		ROLLBACK;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindItinerariesWithActivitiesWithinACertainDistanceOf` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindItinerariesWithActivitiesWithinACertainDistanceOf`(IN LatCoordinate Decimal(6,4), IN LongCoordinate Decimal(7,4), IN MaxDistanceAwayInMiles DOUBLE)
BEGIN
	SELECT
		`I`.`ItineraryID` AS `ItineraryID`,
		`I`.`ItineraryName` AS `ItineraryName`,
		`I`.`StartDate` AS `StartDate`,
		`I`.`EndDate` AS `EndDate`,
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
		`Q`.`StartTime` AS `StartTime`,
		`Q`.`EndTime` AS `EndTime`,
        `Q`.`Description` AS `Description`,
        -- Taken from stack overflow, which in turn took it from the Google Maps API. Distance formula, coordingates to miles.
        (
			3959 * acos (
			cos ( radians(LatCoordinate) )
			* cos( radians(  `A`.`ActivityLatitudeCoordinate` ) )
			* cos( radians( `A`.`ActivityLongitudeCoordinate` ) - radians(LongCoordinate) )
			+ sin ( radians(LatCoordinate) )
			* sin( radians( `A`.`ActivityLatitudeCoordinate`) )
		)) AS `DistanceAway`
    FROM
        ((`Itinerary` `I`
        INNER JOIN `ItineraryITem` `Q` ON ((`I`.`ItineraryID` = `Q`.`ItineraryID`)))
        INNER JOIN `Activity` `A` ON ((`Q`.`ActivityID` = `A`.`ActivityID`)))
	 Having 
		`DistanceAway` <= MaxDistanceAwayInMiles
		;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FindUsersWithNameLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `FindUsersWithNameLike`(IN screen VARCHAR(45))
BEGIN
	SELECT  `UserID`, `ScreenName`, `FirstName`, `LastName`,
    (`ScreenName` LIKE screen) AS IsExactMatch
    FROM `User` WHERE `ScreenName` LIKE CONCAT('%', screen, '%')
    ORDER BY IsExactMatch DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RetrieveActivitiesForGivenItinerary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `RetrieveActivitiesForGivenItinerary`(IN ItineraryIdentifier int, out errorCode int, out errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Invalid Itinerary ID. This is an API error.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		-- Itinerary ID is invalid. This means the API is broken.
		IF (@errno = 1452)
		THEN
			SET errorCode = 1;
			SET errorMessage = "Itinerary ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    Set errorMessage = '';
    
	SELECT 
        `D`.`CurrentDay` AS `CurrentDay`,
        `A`.`ActivityName` AS `ActivityName`,
        `A`.`StartTime` AS `StartTime`,
        `A`.`EndTime` AS `EndTime`
    FROM
        ((`Itinerary` `I`
        LEFT JOIN `PlannedDay` `D` ON ((`I`.`ItineraryID` = `D`.`ItineraryID`)))
        LEFT JOIN `PlannedActivity` `A` ON ((`D`.`PlannedDayID` = `A`.`PlannedDayID`)))
	WHERE I.ItineraryID = ItineraryIdentifier;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RetrieveAllItinerariesForUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `RetrieveAllItinerariesForUser`(IN UserID int, OUT errorCode int, out errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Invalid User ID. This is an API error.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		-- USER ID is invalid. This means the API is broken.
		IF (@errno = 1452)
		THEN
			SET errorCode = 1;
			SET errorMessage = "User ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    Set errorMessage = '';
	
    SELECT 
		`I`.`ItineraryID` AS `ItineraryID`,
        `I`.`ItineraryName` AS `ItineraryName`,
        `I`.`StartDate` AS `StartDate`,
        `I`.`EndDate` AS `EndDate`
    FROM
        `Itinerary` AS `I`
	WHERE I.CreatorID = UserID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RetrieveAllItineraryInformationForUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `RetrieveAllItineraryInformationForUser`(IN UserID int, OUT errorCode int, out errorMessage varchar(128))
BEGIN
	/* Error Codes:
     * 1: Invalid User ID. This is an API error.
     */
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		-- USER ID is invalid. This means the API is broken.
		IF (@errno = 1452)
		THEN
			SET errorCode = 1;
			SET errorMessage = "User ID does not exist, the API is broken somehow";
		-- Unhandled error.
		ELSE 
			SET errorCode = @errNo;
			SET errorMessage = @text;
		END IF;
	END;
    
    SET errorCode = 0;
    Set errorMessage = '';
	
	SELECT 
        `I`.`ItineraryID` AS `ItineraryID`,
		`I`.`ItineraryName` AS `ItineraryName`,
		`I`.`StartDate` AS `StartDate`,
		`I`.`EndDate` AS `EndDate`,
		`A`.`ActivityID` AS `ActivityID`,
        `A`.`ActivityName` AS `ActivityName`,
		`A`.`Latitude` AS `Latitude`,
		`A`.`Longitude` AS `Longitude`,
		`Q`.`StartTime` AS `StartTime`,
		`Q`.`EndTime` AS `EndTime`,
        `Q`.`Description` AS `Description`
   FROM
        ((`Itinerary` `I`
        INNER JOIN `ItineraryItem` `Q` ON ((`I`.`ItineraryID` = `Q`.`ItineraryID`)))
        INNER JOIN `Activity` `A` ON ((`Q`.`ActivityID` = `A`.`ActivityID`)))
	WHERE I.CreatorID = UserID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TryLoginGetID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`admin`@`%` PROCEDURE `TryLoginGetID`(IN email VARCHAR(45), IN pass VARCHAR(64), OUT id INT, out errorCode int, out errorMessage varChar(128))
BEGIN
	/* Error Codes***:
     * 1: There is no user with this email in the database.
     * 2: Invalid Password.
     *** This is not a true error; the query runs correctly, but as far as the UI is concerned the result is the same. ***
     */
	
    SELECT K.UserID, K.HashedPassword into @tempID, @pass FROM NormalLogin as K WHERE K.Email = email LIMIT 1;

    IF (@tempID IS NULL)
    THEN
		SET errorCode = 1;
        SET errorMessage = "No user with that email exists";
	ELSEIF (NOT BINARY @pass = pass)
    THEN
		SET errorCode = 2;
        SET errorMessage = "Invalid Password";
	ELSE
		SET errorCode = 0;
        SET errorMessage = '';
        Set id = @tempID;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Final view structure for view `DefaultUIView`
--

/*!50001 DROP VIEW IF EXISTS `DefaultUIView`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`admin`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `DefaultUIView` AS select `I`.`ItineraryID` AS `ItineraryID`,`I`.`ItineraryName` AS `ItineraryName`,`I`.`StartDate` AS `StartDate`,`I`.`EndDate` AS `EndDate`,`A`.`ActivityID` AS `ActivityID`,`A`.`ActivityName` AS `ActivityName`,`A`.`Latitude` AS `Latitude`,`A`.`Longitude` AS `Longitude`,`Q`.`StartTime` AS `StartTime`,`Q`.`EndTime` AS `EndTime`,`Q`.`Description` AS `Description` from ((`Itinerary` `I` join `ItineraryItem` `Q` on((`I`.`ItineraryID` = `Q`.`ItineraryID`))) join `Activity` `A` on((`Q`.`ActivityID` = `A`.`ActivityID`))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-10-30 16:55:32